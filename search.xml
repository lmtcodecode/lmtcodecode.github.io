<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JS中的Array-from()</title>
    <url>/2021/07/25/JS%E4%B8%AD%E7%9A%84Array-from/</url>
    <content><![CDATA[<p>本篇文章给大家带来的内容是关于JS的Array.from()。</p>
<span id="more"></span>

<h4 id="一、基础介绍"><a href="#一、基础介绍" class="headerlink" title="一、基础介绍"></a>一、基础介绍</h4><ol>
<li><code>Array.from()</code>方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</li>
</ol>
<h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(arrayLike[, mapFn[, thisArg]])</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>arrayLike</code></p>
<p>想要转换成数组的伪数组对象或可迭代对象。</p>
</li>
<li><p><code>mapFn</code> 可选</p>
<p>如果指定了该参数，新数组中的每个元素会执行该回调函数。相当于<code>map</code>。</p>
</li>
<li><p><code>thisArg</code> 可选</p>
<p>可选参数，执行回调函数 <code>mapFn</code> 时 <code>this</code> 对象。</p>
</li>
</ul>
<p>返回一个新的数组实例。</p>
<h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><p><code>Array.from()</code> 可以通过以下方式来创建数组对象：</p>
<ul>
<li>伪数组对象（拥有一个 <code>length</code> 属性和若干索引属性的任意对象，返回数组长度与<code>length</code>有关，裁剪或补齐<code>undefined</code>）</li>
<li>可迭代对象（可以获取对象中的元素,如<code> Map</code>和 <code>Set</code> 等）</li>
</ul>
<h4 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从Set生成数组</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>]);</span><br><span class="line"><span class="built_in">Array</span>.from(set);</span><br><span class="line"><span class="comment">// [ &quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot; ]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成指定数组</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newArr = <span class="built_in">Array</span>.from(obj, <span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">studentId</span>: <span class="built_in">this</span>.prefix + item;</span><br><span class="line">        order: index</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="attr">prefix</span>: <span class="string">&quot;No.&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ul>
<li>MDN Web Docs</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中的undefined</title>
    <url>/2021/07/24/JS%E4%B8%AD%E7%9A%84undefined/</url>
    <content><![CDATA[<p>本篇文章给大家带来的内容是关于JS的undefined。</p>
<span id="more"></span>

<h4 id="一、JS的数据类型"><a href="#一、JS的数据类型" class="headerlink" title="一、JS的数据类型"></a>一、JS的数据类型</h4><p>在ECMAScript中有六种基本数据类型: <code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code> 、<code>String</code>、<code>Symbol </code>。还有一种复杂数据类型——<code>Object</code>。</p>
<h4 id="二、Undefined-类型"><a href="#二、Undefined-类型" class="headerlink" title="二、Undefined 类型"></a>二、Undefined 类型</h4><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p><code>undefined</code>既是一个原始数据类型，也是一个原始值数据；<code>undefined</code>也是全局对象的一个属性(<code>window.undefined</code>)。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//若变量没有被赋值，默认值为undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">// undefined</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个函数如果没有使用返回语句指定返回值，就会返回一个未定义的值。</span></span><br><span class="line">test();<span class="comment">// 返回&quot;undefined&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 虽然在JS中undefined不是保留字，但不要这样做！</span></span><br><span class="line"><span class="keyword">var</span> <span class="literal">undefined</span> = <span class="string">&#x27;foo&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h5><p><code>undefined</code>是一个不能被<strong>配置</strong>（non-configurable），不能被<strong>重写</strong>（non-writable），不能被<strong>枚举</strong>（non-enumerable）的属性。</p>
<h4 id="三、undefined的使用"><a href="#三、undefined的使用" class="headerlink" title="三、undefined的使用"></a>三、undefined的使用</h4><ul>
<li>可以使用<code>undefined</code>和<code>===</code>或<code>!==</code>操作符来决定一个变量是否拥有值。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x === <span class="literal">undefined</span>) &#123;</span><br><span class="line"><span class="comment">// 执行这些语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 这些语句不会被执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：这里是必须使用严格相等操作符（===）而不是标准相等操作符（==），因为 x == undefined 会检查x是不是null。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x == <span class="literal">undefined</span>) &#123;</span><br><span class="line"><span class="comment">// 也会执行这些语句，因为做了隐式转换</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 这些语句不会被执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在某种情况下，可以使用<code>void</code>操作符来代替<code>undefined</code>。适用于怕<code>undefined</code>被改变的情况下。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="keyword">if</span>(x === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 执行这些语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分享就到这里啦！如有不对还请指出~~~</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中的相等判断</title>
    <url>/2021/07/20/JS%E4%B8%AD%E7%9A%84%E7%9B%B8%E7%AD%89%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<p>本篇文章给大家带来的内容是关于JS中如何判断是否相等。</p>
<span id="more"></span>

<h4 id="ES2015中有四种相等算法："><a href="#ES2015中有四种相等算法：" class="headerlink" title="ES2015中有四种相等算法："></a>ES2015中有四种相等算法：</h4><ul>
<li>抽象（非严格）相等 ：<code>==</code>；</li>
<li>严格相等： <code>===</code>；</li>
<li>同值相等：<code>-0 !== +0</code>、<code>NAN === NAN</code>。</li>
<li>零值相等：<code>-0 === +0</code>；</li>
</ul>
<h5 id="1、严格相等"><a href="#1、严格相等" class="headerlink" title="1、严格相等 ==="></a>1、严格相等 ===</h5><p>两个被比较的值在比较前都不进行隐式转换。如果两个被比较的值具有不同的类型，这两个值是不全等的。否则，如果两个被比较的值类型相同，值也相同(<code>NAN</code>除外)。</p>
<p>全等操作符使用略加修改的语义来处理两个特殊情况：</p>
<ul>
<li>第一个情况是，浮点数<code>0</code>是不分正负的。区分 <code>+0</code> 和<code>-0</code> 在解决一些特定的数学问题时是必要的，但是大部分情况下我们并不用关心。全等操作符认为这两个值是全等的；</li>
<li>第二个情况是，浮点数包含了 <code>NaN </code>值，用来表示某些定义不明确的数学问题的解，例如：正无穷加负无穷。全等操作符认为 <code>NaN </code>与其他任何值都不全等，包括它自己。（等式 <code>(x !== x)</code> 成立的唯一情况是 x 的值为 <code>NaN</code>）。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;0&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num === num); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj === obj); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str === str); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num === obj); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(num === str); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(obj === str); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> === <span class="literal">undefined</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(obj === <span class="literal">null</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(obj === <span class="literal">undefined</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h5 id="2、非严格相等"><a href="#2、非严格相等" class="headerlink" title="2、非严格相等 =="></a>2、非严格相等 ==</h5><p>相等操作符比较两个值是否相等，在比较前将两个被比较的值转换为相同类型。在转换后，最终的比较方式等同于全等操作符<code> ===</code> 的比较方式。</p>
<p>一般而言，根据 ECMAScript 规范，所有的对象都与 <code>undefined </code>和 <code>null </code>不相等。但是大部分浏览器允许窄对象（所有页面中的 <code>document.all </code>对象），在某些情况下， <code>document.all </code>  === <code>undefined </code>的角色。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;0&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num == num); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj == obj); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str == str); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num == obj); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(num == str); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj == str); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// both false, except in rare cases</span></span><br><span class="line"><span class="built_in">console</span>.log(obj == <span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj == <span class="literal">undefined</span>);</span><br></pre></td></tr></table></figure>

<h5 id="3、同值相等"><a href="#3、同值相等" class="headerlink" title="3、同值相等"></a>3、同值相等</h5><ul>
<li><code>+0 !== -0</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向 Nmuber 构造函数添加一个不可变的属性 NEGATIVE_ZERO</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Number</span>, <span class="string">&quot;NEGATIVE_ZERO&quot;</span>,</span><br><span class="line">                      &#123; <span class="attr">value</span>: -<span class="number">0</span>, <span class="attr">writable</span>: <span class="literal">false</span>, <span class="attr">configurable</span>: <span class="literal">false</span>, <span class="attr">enumerable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">attemptMutation</span>(<span class="params">v</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(<span class="built_in">Number</span>, <span class="string">&quot;NEGATIVE_ZERO&quot;</span>, &#123; <span class="attr">value</span>: v &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Object.defineProperty</code> 在试图修改不可变属性时，如果这个属性确实被修改了则会抛出异常，反之什么都不会发生。例如如果 v 是 -0 ，那么没有发生任何变化，所以也不会抛出任何异常。但如果 v 是 +0 ，则会抛出异常。</p>
<ul>
<li><code>NAN === NAN</code></li>
</ul>
<p>与以上类似。</p>
<h5 id="4、零值相等"><a href="#4、零值相等" class="headerlink" title="4、零值相等"></a>4、零值相等</h5><p>与同值相等类似，不过会认为 +0 与 -0 相等。</p>
<hr>
<h4 id="JavaScript提供三种比较操作："><a href="#JavaScript提供三种比较操作：" class="headerlink" title="JavaScript提供三种比较操作："></a>JavaScript提供三种比较操作：</h4><ul>
<li>严格相等比较 (也被称作”strict equality”, “identity”, “triple equals”)，使用 <code>===</code>；</li>
<li>抽象相等比较 (“loose equality”，”double equals”) ，使用 <code>==</code>；</li>
<li>同值相等的实现： <code>Object.is</code>（ECMAScript 2015/ ES6 新特性）。</li>
</ul>
<h5 id="什么时候使用-Object-is或者-？"><a href="#什么时候使用-Object-is或者-？" class="headerlink" title="什么时候使用 Object.is或者===  ？"></a>什么时候使用 <code>Object.is</code>或者<code>===</code>  ？</h5><p>你的工作需要去镜像<code>Object.defineProperty</code>的一些特性时。例如它对待0的特殊方式，特别是关于属性描述器。如果你的工作不需要这些，那你应该避免使用<code>Object.is</code>，使用<code>===</code>来代替。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中的函数</title>
    <url>/2021/07/24/JS%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>本篇文章给大家带来的内容是关于JS的函数。</p>
<span id="more"></span>

<h4 id="一、函数定义"><a href="#一、函数定义" class="headerlink" title="一、函数定义"></a>一、函数定义</h4><p>函数是指一段可以直接被另一段程序或代码引用的程序或代码，也称为子程序。在JavaScript中，每个函数其实都是一个<code>Function</code>对象。</p>
<h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><h6 id="1、函数声明"><a href="#1、函数声明" class="headerlink" title="1、函数声明"></a>1、函数声明</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">[param[, param[, ... param]]]</span>) </span>&#123; statements &#125;</span><br></pre></td></tr></table></figure>

<h6 id="2、函数表达式"><a href="#2、函数表达式" class="headerlink" title="2、函数表达式"></a>2、函数表达式</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">[param[, param[, ... param]]]</span>) </span>&#123; statements &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>name</code></p>
<p>函数名，<strong>可以省略</strong>。当省略函数名的时候，该函数就成为了<strong>匿名函数</strong>。</p>
</li>
</ul>
<h4 id="二、描述"><a href="#二、描述" class="headerlink" title="二、描述"></a>二、描述</h4><p>如果一个函数中没有使用<code>return</code>语句，则它默认返回<code>undefined</code>。要想返回一个特定的值，则函数必须使用 <code>return</code> 语句来指定一个要返回的值。(使用<code>new</code>关键字调用一个<code>构造函数</code>除外)。</p>
<h5 id="实参与形参"><a href="#实参与形参" class="headerlink" title="实参与形参"></a>实参与形参</h5><p>调用函数时，传递给函数的值被称为函数的<strong>实参</strong>，对应位置的函数参数名叫作<strong>形参</strong>。</p>
<ul>
<li><p>如果<strong>实参</strong>是一个包含原始值(数字，字符串，布尔值)的变量，则就算函数在内部改变了对应形参的值，返回后，该实参变量的值也不会改变；</p>
</li>
<li><p>如果<strong>实参</strong>是一个对象引用，则对应形参会和该实参指向同一个对象。假如函数在内部改变了对应形参的值，返回后，实参指向的对象的值也会改变。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params">theObject</span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">   theObject.brand = <span class="string">&quot;Toyota&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> mycar = &#123;</span><br><span class="line">   <span class="attr">brand</span>: <span class="string">&quot;Honda&quot;</span>,</span><br><span class="line">   <span class="attr">model</span>: <span class="string">&quot;Accord&quot;</span>,</span><br><span class="line">   <span class="attr">year</span>: <span class="number">1998</span></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹出 &#x27;Honda&#x27;</span></span><br><span class="line"> <span class="built_in">console</span>.log(mycar.brand);</span><br><span class="line"> myFunc(mycar);</span><br><span class="line"><span class="comment">//弹出 &#x27;Toyota&#x27;,对象的属性已被修改.</span></span><br><span class="line"> <span class="built_in">console</span>.log(mycar.brand);</span><br></pre></td></tr></table></figure>

<h4 id="三、不同的函数"><a href="#三、不同的函数" class="headerlink" title="三、不同的函数"></a>三、不同的函数</h4><h5 id="立即执行函数（IIFE）"><a href="#立即执行函数（IIFE）" class="headerlink" title="立即执行函数（IIFE）"></a>立即执行函数（IIFE）</h5><p>当函数只使用一次时，通常使用<strong>IIFE (*Immediately Invokable Function Expressions*)。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p><strong>IIFE</strong>是在函数声明后立即调用的函数表达式。</p>
<h5 id="函数生成器声明"><a href="#函数生成器声明" class="headerlink" title="函数生成器声明"></a>函数生成器声明</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">name</span>(<span class="params">[param[, param[, ...param]]]</span>) </span>&#123; statements &#125;</span><br></pre></td></tr></table></figure>

<h5 id="箭头函数表达式"><a href="#箭头函数表达式" class="headerlink" title="箭头函数表达式"></a>箭头函数表达式</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">([param] [, param]) =&gt; &#123; statements &#125; param =&gt; expression</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>param</code></p>
<p>参数名称. 零参数需要用()表示. 只有一个参数时不需要括号. (例如 <code>foo =&gt; 1</code>)</p>
</li>
<li><p><code>statements or expression</code></p>
<p>多个声明statements需要用大括号括起来，而单个表达式时则不需要。表达式expression也是该函数的隐式返回值。</p>
</li>
</ul>
<h5 id="Function构造函数"><a href="#Function构造函数" class="headerlink" title="Function构造函数"></a>Function构造函数</h5><p>！不建议使用！会引起一些问题！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Function</span> (arg1, arg2, ... argN, functionBody)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>arg1, arg2, ... arg*N*</code></p>
<p>函数使用0个或多个名称作为正式的参数名称。每一个必须是符合有效的JavaScript标识符规则的<strong>字符串</strong>，或者是用逗号分隔的字符串列表，例如“x”，“theValue”或“a，b”。</p>
</li>
<li><p><code>functionBody</code></p>
<p>一个构成的函数定义的，包含JavaScript声明语句的字符串。</p>
</li>
</ul>
<h5 id="生成器构造函数"><a href="#生成器构造函数" class="headerlink" title="生成器构造函数"></a>生成器构造函数</h5><p>！不建议使用！会引起一些问题！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> GeneratorFunction (arg1, arg2, ... argN, functionBody)</span><br></pre></td></tr></table></figure>

<h4 id="四、函数参数"><a href="#四、函数参数" class="headerlink" title="四、函数参数"></a>四、函数参数</h4><ul>
<li>默认参数：如果没有值或传入了未定义的值，默认函数参数允许形式参数使用默认值初始化。</li>
<li>剩余参数：剩余参数语法允许将数量不限的参数描述成一个数组。</li>
</ul>
<h5 id="arguments对象"><a href="#arguments对象" class="headerlink" title="arguments对象"></a>arguments对象</h5><ul>
<li><code>arguments</code>: 一个包含了传递给当前执行函数参数的<strong>类数组</strong>的对象。</li>
<li><code>arguments.callee</code> : 当前正在执行的函数。（X）</li>
<li><code>arguments.caller</code> : 调用当前执行函数的函数。（X）</li>
<li><code>arguments.length</code>: 传给函数的参数的长度。</li>
</ul>
<h4 id="五、构造函数-、-函数声明-、函数表达式"><a href="#五、构造函数-、-函数声明-、函数表达式" class="headerlink" title="五、构造函数 、 函数声明 、函数表达式"></a>五、构造函数 、 函数声明 、函数表达式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个用Function构造函数定义的函数,被赋值给变量multiply</span></span><br><span class="line"><span class="keyword">var</span> multiply = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;return x * y&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个名为multiply的函数声明：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个匿名函数的函数表达式，被赋值给变量multiply</span></span><br><span class="line"><span class="keyword">var</span> multiply = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个命名为func_named的函数的函数表达式，被赋值给变量multiply</span></span><br><span class="line"><span class="keyword">var</span> multiply = <span class="function"><span class="keyword">function</span> <span class="title">func_name</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>函数名和函数的变量存在着差别。</p>
<ul>
<li>函数名不能被改变，但函数的变量却能够被再分配。</li>
<li>函数名只能在函数体内使用，倘若在函数体外使用函数名将会导致错误（如果函数之前是通过一个var语句声明的则是undefined）。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> y = <span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">alert(x); <span class="comment">// throws an error</span></span><br></pre></td></tr></table></figure>

<hr>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ul>
<li>MDN Web Docs</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建博客</title>
    <url>/2021/07/16/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<span id="more"></span>

<h3 id="一、搭建hexo博客"><a href="#一、搭建hexo博客" class="headerlink" title="一、搭建hexo博客"></a>一、搭建hexo博客</h3><h4 id="1、下载node-js、git"><a href="#1、下载node-js、git" class="headerlink" title="1、下载node.js、git"></a>1、下载node.js、git</h4><blockquote>
<p><a href="https://nodejs.org/">https://nodejs.org</a></p>
</blockquote>
<h4 id="2、下载git"><a href="#2、下载git" class="headerlink" title="2、下载git"></a>2、下载git</h4><blockquote>
<p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p>
</blockquote>
<h4 id="3、安装hexo"><a href="#3、安装hexo" class="headerlink" title="3、安装hexo"></a>3、安装hexo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h4 id="4、创建blog目录并进入"><a href="#4、创建blog目录并进入" class="headerlink" title="4、创建blog目录并进入"></a>4、创建blog目录并进入</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure>

<h4 id="5、初始化博客"><a href="#5、初始化博客" class="headerlink" title="5、初始化博客"></a>5、初始化博客</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>

<h4 id="6、生成静态文件"><a href="#6、生成静态文件" class="headerlink" title="6、生成静态文件"></a>6、生成静态文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<h4 id="6、启动博客本地服务并访问"><a href="#6、启动博客本地服务并访问" class="headerlink" title="6、启动博客本地服务并访问"></a>6、启动博客本地服务并访问</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="http://localhost:4000/">http://localhost:4000/</a></p>
</blockquote>
<hr>
<h3 id="二、把项目部署到github"><a href="#二、把项目部署到github" class="headerlink" title="二、把项目部署到github"></a>二、把项目部署到github</h3><h4 id="1、新建仓库"><a href="#1、新建仓库" class="headerlink" title="1、新建仓库"></a>1、新建仓库</h4><blockquote>
<p>名字：YourGithubName.github.io</p>
</blockquote>
<h4 id="2、配置blog路径下的-config-yml文件"><a href="#2、配置blog路径下的-config-yml文件" class="headerlink" title="2、配置blog路径下的_config.yml文件"></a>2、配置blog路径下的_config.yml文件</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line">	<span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">	<span class="attr">deploy:</span></span><br><span class="line">  		<span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"> 		<span class="attr">repo:</span> <span class="string">https://github.com/YourGithubName/YourGithubName.github.io.git</span></span><br><span class="line">  		<span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<h4 id="3、安装npm-install-hexo-deployer-git-–save"><a href="#3、安装npm-install-hexo-deployer-git-–save" class="headerlink" title="3、安装npm install hexo-deployer-git –save"></a>3、安装<strong>npm install hexo-deployer-git –save</strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h4 id="4、把项目部署到github"><a href="#4、把项目部署到github" class="headerlink" title="4、把项目部署到github"></a>4、把项目部署到github</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<h4 id="5、访问这个地址可以查看博客"><a href="#5、访问这个地址可以查看博客" class="headerlink" title="5、访问这个地址可以查看博客"></a>5、访问这个地址可以查看博客</h4><blockquote>
<p><a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a>  </p>
</blockquote>
]]></content>
      <categories>
        <category>零碎</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>最长递增子序列</title>
    <url>/2021/07/26/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<p>本篇文章给大家带来的内容是关于最长递增子序列（Longest Increasing Subsequence，LIS)。</p>
<span id="more"></span>

<p>指的是找到一个特定的最长的子序列，并且子序列中的所有元素单调递增。</p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/"><strong>Leetcode300.最长递增子序列</strong></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。</span><br><span class="line"></span><br><span class="line">子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line">1 &lt;= nums.length &lt;= 2500</span><br><span class="line">-104 &lt;= nums[i] &lt;= 104</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">**示例 <span class="number">1</span>：**</span><br><span class="line"></span><br><span class="line">&gt; 输入：nums = [<span class="number">10</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">101</span>,<span class="number">18</span>]</span><br><span class="line">&gt; 输出：<span class="number">4</span></span><br><span class="line">&gt; 解释：最长递增子序列是 [<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">101</span>]，因此长度为 <span class="number">4</span> 。</span><br><span class="line"></span><br><span class="line">**示例 <span class="number">2</span>：**</span><br><span class="line"></span><br><span class="line">&gt; 输入：nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&gt; 输出：<span class="number">4</span></span><br><span class="line"></span><br><span class="line">**示例 <span class="number">3</span>：**</span><br><span class="line"></span><br><span class="line">&gt; 输入：nums = [<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>]</span><br><span class="line">&gt; 输出：<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="1、贪心-二分"><a href="#1、贪心-二分" class="headerlink" title="1、贪心+二分"></a>1、贪心+二分</h4><p>如果我们要使上升子序列尽可能的<strong>长</strong>，则我们需要让序列上升得尽可能<strong>慢</strong>，因此我们希望每次在上升子序列最后加上的那个数尽可能的<strong>小</strong>。基于上面的贪心思路，我们维护一个数组<em>d[ ]</em> ，表示最长上升子序列的末尾元素的最小值。</p>
<p>遍历数组nums，更新数组d，len为数组d的长度。</p>
<ol>
<li><em><strong>nums[i]&gt;d[len - 1]</strong></em> ，则直接加入到 d<em>d</em> 数组末尾，并更新 <em>len = len+1</em>；</li>
<li><em><strong>nums[i]&lt;d[len - 1]</strong></em> ，找到第一个比*nums[i]<em>小的数d[k]，并且更新</em>d[k + 1] = nums[i]*；</li>
<li>如果<strong>找不到</strong>，则证明*nums[i]*比数组d的任何一个数都要小，则更新数组d的第一个值。</li>
</ol>
<p><strong>代码（JavaScript版）：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lengthOfLIS = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 最后返回len ； len == 1 ==&gt; n &gt; 0的情况至少会有1个最长递增子序列</span></span><br><span class="line">    <span class="keyword">let</span> len = <span class="number">1</span>, n = nums.length</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="comment">// 维护的贪心数组</span></span><br><span class="line">    <span class="keyword">let</span> d = []</span><br><span class="line">    d[len] = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">// 遍历nums</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="comment">// 情况1</span></span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; d[len]) &#123;</span><br><span class="line">            d[++len] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 情况2 ==&gt; 二分</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> l = <span class="number">1</span>, r = len, pos = <span class="number">0</span>; <span class="comment">// 如果找不到说明所有的数都比 nums[i] 大，此时要更新 d[1]，所以这里将 pos 设为 0</span></span><br><span class="line">            <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">                <span class="keyword">let</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (d[mid] &lt; nums[i]) &#123;</span><br><span class="line">                    <span class="comment">// 记录</span></span><br><span class="line">                    pos = mid;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            d[pos + <span class="number">1</span>] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p>LeetCode</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
